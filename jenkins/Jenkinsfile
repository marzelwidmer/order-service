pipeline {
    // Agent Maven
    agent {
        node {
            label 'maven'
        }
    }
    // Environment
    environment {
        GIT_COMMIT_SHORT = env.GIT_COMMIT.take(7)
        REPOSITORY = "github.com/marzelwidmer/order-service.git"
        BRANCHES = "[[name: '*/master']]"
        GIT_LAST_COMMIT_MESSAGE = sh(
                script: "printf \$(git log --pretty='%s (%an)' -1)",
                returnStdout: true
        )
        GIT_TAG_MESSAGE = 'ci-release-bot'
        GIT_TAG_USER_EMAIL = "jenkins@c3smonkey.ch"
        GIT_TAG_USER_NAME = "Jenkins"
        DEV_ENVIRONMENT = 'development'
        TEST_ENVIRONMENT = 'testing'
        PROD_ENVIRONMENT = 'production'
        APP_NAME = 'order-service'
    }
    // Stages
    stages {
        // Setup
        stage('Build & Test Application') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jenkins-ci-user-at-github', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
                        git(branches: "$BRANCHES", changelog: true, url: "https://$TOKEN:x-oauth-basic@$REPOSITORY")
                    }

                    // Last Git commit
                    LAST_GIT_COMMIT = sh(
                            script: 'git --no-pager show -s --format=\'%Cblue %h %Creset %s %Cgreen %an %Creset (%ae)\'',
                            returnStdout: true
                    ).trim()
                    echo "Branch: ${env.GIT_BRANCH}"
                    echo "Last Git commit: ${GIT_LAST_COMMIT_MESSAGE}"
                    echo "Last Git commit: ${LAST_GIT_COMMIT}"
                    echo "Last Git commit short: ${GIT_COMMIT_SHORT}"

                    // Compute next version
                    NEXT_VERSION = sh(
                            script: """
                                     chmod +x ./jenkins/ci-semver.sh
                                     ./jenkins/ci-semver.sh
                                    """,
                            returnStdout: true
                    ).trim()
                    echo "NEXT_VERSION : ${NEXT_VERSION}"
                    sh("""
                        echo next version will be $NEXT_VERSION
                        ./mvnw package -Djgitver.use-version=$NEXT_VERSION
                    """)
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'target/**/changelog.*,target/**/*.jar', fingerprint: true, onlyIfSuccessful: true
                }
            }
        }
        // Dev Deployment
        stage('deploy to development') {
            steps {
                sh "./mvnw  fabric8:deploy -DskipTests -Dfabric8.namespace=development  -Djgitver.use-version=$NEXT_VERSION"
            }
        }
        // Verify Deployment
        stage('verify deployment in development environment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshiftVerifyDeployment(namespace: DEV_ENVIRONMENT,
                                    depCfg: APP_NAME,
                                    replicaCount: '1',
                                    verifyReplicaCount: 'true',
                                    waitTime: '300000')
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir() /* clean up our workspace */
        }
        success {
            echo 'I succeeeded!'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }
    }
}